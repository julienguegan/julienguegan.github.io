<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.9.0">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2021-08-18T14:31:54+02:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Blog du Julien</title><subtitle>Mon blog où j'écris des trucs à propos de machins.</subtitle><author><name>Julien Guégan</name></author><entry><title type="html">Dynamique des populations</title><link href="http://localhost:4000/posts/2021-08-11-dynamique_des_populations/" rel="alternate" type="text/html" title="Dynamique des populations" /><published>2021-08-12T04:18:30+02:00</published><updated>2021-08-12T04:18:30+02:00</updated><id>http://localhost:4000/posts/dynamique_des_populations</id><content type="html" xml:base="http://localhost:4000/posts/2021-08-11-dynamique_des_populations/">&lt;p class=&quot;text-justify&quot;&gt;Parmis les enjeux du 21&lt;sup&gt;ème&lt;/sup&gt; siècle, l’écologie a un rôle majeure puisqu’elle est la science qui étudie les interactions des êtres vivants entre eux et avec leur milieu. Pour modéliser ces interactions, la dynamique des populations est la branche qui s’intéresse aux fluctuations démographiques des espèces. Ses applications sont nombreuses puisqu’elle peut permettre de répondre à des problèmes variés comme la gestion d’espèces menacées, la protection des cultures contre des nuisibles, le contrôle de bioréacteurs ou la prédiction des épidémies.&lt;/p&gt;

&lt;h2 id=&quot;modèle-de-verhulst&quot;&gt;Modèle de Verhulst&lt;/h2&gt;

&lt;p&gt;A la fin du 18&lt;sup&gt;ème&lt;/sup&gt; siècle, le modèle de &lt;strong&gt;Malthus&lt;/strong&gt; décrit la variation d’une taille de population $y$ au cours du temps $t$ par l’équation différentielle :&lt;/p&gt;

\[y'(t) = (n-m) y(t) = r y(t)\]

&lt;p&gt;avec les constantes : $n$ le taux de natalité, $m$ le taux de mortalité et $r$ le taux de croissance. Ce modèle nous dit que, selon le taux de croissance $r$, la taille des populations peut soit diminuer, rester constante ou augmenter de manière exponentielle. Ce modèle ne reflète pas la réalité puisque une population n’augmentera jamais à l’infini.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
   &lt;img src=&quot;/assets/images/malthus_verlhust_photos.png&quot; width=&quot;50%&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;En 1840, &lt;strong&gt;Verlhust&lt;/strong&gt; propose un modèle de croissance plus adapté en partant de l’hypothèse que le taux de croissance $r$ n’est pas une constante mais est fonction affine de la taille de population $y$ :&lt;/p&gt;

\[y'(t) = \big(n(y) - m(y)\big) y(t)\]

&lt;p&gt;Verlhust part notamment de l’hypothèse que plus la taille d’une population augmente alors plus son taux de natalité $n$ diminue et plus son taux de mortalité $m$ augmente. En partant de cette hypothèse et en appliquant quelques manipulations algébriques astucieuses, on peut montrer que l’équation différentielle précédente peut se réécrire sous la forme :&lt;/p&gt;

\[y'(t) = r y(t) \left(1 - \frac{y(t)}{K}\right)\]

&lt;p&gt;avec $K$ une constante appelée &lt;em&gt;capacité d’accueil&lt;/em&gt;. On peut résoudre analytiquement cette équation avec la condition initiale $y(t=0)=y_0$, on obtient la &lt;strong&gt;solution logistique&lt;/strong&gt; :&lt;/p&gt;

\[y(t) = \frac{K}{1+\left(\frac{K}{y_0}-1\right)e^{-rt}}\]

&lt;p align=&quot;center&quot;&gt;
   &lt;img src=&quot;/assets/images/verlhust_graph.png&quot; width=&quot;70%&quot; /&gt;
&lt;/p&gt;

&lt;details class=&quot;notice--primary&quot;&gt;
  &lt;summary&gt;Résolution détaillée de l'équation différentielle logistique par séparation de variable&lt;/summary&gt;

  $$
  \begin{align*}
    \int_{y_0}^{y(t)} \frac{1}{y(1-y/K)}dy &amp;amp;= \int_0^t r \ d\tau \\
    \int_{y_0}^{y(t)} \frac{K}{y(K-y)}dy &amp;amp;= \int_0^t r \ d\tau \\
    \int_{y_0}^{y(t)} \frac{1}{y}dy +  \int_{y_0}^{y(t)} \frac{1}{K-1}dy &amp;amp;= \int_0^t r \ d\tau \\
    \ln \left| \frac{y(t)}{y_0} \right| - \ln \left| \frac{K-y(t)}{K-y_0} \right| &amp;amp;= r \ t \\
    \ln \left( \frac{y(t)\big(K-y_0\big)}{y_0\big(K-y(t)\big)} \right) &amp;amp;= r \ t \\
    \frac{y(t)}{K-y(t)} &amp;amp;= \frac{y_0}{K-y_0}e^{rt} \\
    y(t)\left(1+\frac{y_0}{K-y_0}e^{rt} \right) &amp;amp;= \frac{K y_0 e^{rt}}{K-y_0} \\
    y(t) &amp;amp;= \frac{Ky_0e^{rt}}{K-y_0+y_0e^{rt}} \\
    y(t) &amp;amp;= \frac{K y_0}{(K-y_0)e^{-rt}+y_0} \\
  \end{align*} \\
  \square
  $$
&lt;/details&gt;

&lt;p class=&quot;text-justify&quot;&gt;On remarque que $ \lim\limits_{t\to\infty} y(t) = K $. Ce qui signifie que peut importe la taille de la population initiale $y_0$, la population finira toujours par tendre vers $K$ la capacité d’accueil qu’on qualifie souvent comme le nombre d’individus maximal que le milieu peut accueillir (selon l’espace, les ressources …). Cette &lt;a href=&quot;https://fr.wikipedia.org/wiki/Fonction_logistique_(Verhulst)&quot;&gt;fonction dite logistique&lt;/a&gt; introduite pour la première fois par Verlhust pour modéliser la croissance des populations trouvera par la suite plein d’application dans des domaines variés comme l’économie, la chimie, les statistiques et plus récemment les réseaux de neurones artificielles.&lt;/p&gt;

&lt;h2 id=&quot;modèle-de-lotka-volterra&quot;&gt;Modèle de Lotka-Volterra&lt;/h2&gt;

&lt;p class=&quot;text-justify&quot;&gt;Les modèles de Lotka-Volterra sont des sytèmes d’équations simples qui sont apparus au début du 20&lt;sup&gt;ème&lt;/sup&gt; siècle. Ils portent le nom de deux mathématiciens qui ont publié en même temps mais indépendamment sur le sujet : Volterra, en 1926, pour modéliser les populations de sardines et de leurs prédateurs et Lotka, en 1924, dans son livre &lt;em&gt;Elements of Physical Biology&lt;/em&gt;. Contrairement au modèle de Verlhust qui s’intéresse à une seule population, les modèles de Lotka-Volterra modélisent les interactions entre plusieurs espèces, chacune ayant un impact sur le développement de l’autres.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
   &lt;img src=&quot;/assets/images/lotka_volterra_photos.png&quot; width=&quot;50%&quot; /&gt;
&lt;/p&gt;

&lt;h3 id=&quot;proie-prédateur&quot;&gt;&lt;em&gt;Proie-prédateur&lt;/em&gt;&lt;/h3&gt;

&lt;p class=&quot;text-justify&quot;&gt;Le modèle proie-prédateur de Lotka-Volterra a permis d’expliquer des données collectées de certaines populations d’animaux comme le lynx et lièvre ainsi que le loup et l’élan aux Etats-Unis. On y représente l’évolution du nombre proies $x$ et de prédateurs $y$ au cours du temps $t$ selon le modèle suivant :&lt;/p&gt;

\[\left\{
  \begin{array}{ccc}
    x'(t) = x(t)\ \big(\alpha - \beta y(t)\big) \\
    y'(t) = y(t)\ \big( \delta x(t) - \gamma\big)
  \end{array}
\right.\]

&lt;p class=&quot;text-justify&quot;&gt;avec les paramètres $\alpha$ et $\delta$ sont les taux de reproduction respectivement des proies et des prédateurs et $\beta$ et $\gamma$ sont les taux de mortalité, respectivement, des proies et des prédateurs.&lt;/p&gt;

&lt;p class=&quot;notice--primary&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt; On parle de système autonome : le temps $t$ n’apparaît pas explicitement dans les équations.&lt;/p&gt;

&lt;p class=&quot;text-justify&quot;&gt;Si on développe chacune des équations, on peut plus facilement donner une interprétation. Pour les proies, on a d’une part le terme $\alpha x(t)$ qui modélise la croissance exponentielle avec une source illimitée de nourriture et d’autre part $- \beta x(t) y(t)$ qui représente la prédation proportionnelle à la fréquence de rencontre entre prédateurs et proies. L’équation des prédateurs est très semblable à celle des proies, $\delta x(t)y(t)$ est la croissance des prédateurs proportionnelle à la quantité de nourriture disponible (les proies) et $- \gamma y(t)$ représente la mort naturelle des prédateurs.&lt;/p&gt;

&lt;p&gt;animation pixellique de lapin et renard&lt;/p&gt;

&lt;p class=&quot;text-justify&quot;&gt;On peut caculer les équilibres de ce système d’équations différentielles et également en déduire un comportement mais les solutions n’ont pas d’expression analytique simple. Néanmoins, il est possible de calculer une solution approchée numériquement (plus de détails dans la &lt;a href=&quot;#méthode-numérique-pour-les-EDO&quot;&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;section suivante&lt;/code&gt;&lt;/a&gt;).&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# define ODE to resolve
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;lotka_volterra&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;XY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dX&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;XY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;XY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;XY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;dY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;XY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;XY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;XY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dX&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dY&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# discretization
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T0&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Tmax&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linspace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;T0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Tmax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# TEMPORAL DYNAMIC
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;solution&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;integrate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;odeint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lotka_volterra&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# use scipy solver
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p align=&quot;center&quot;&gt;
   &lt;img src=&quot;/assets/images/lotka_volterra_graph2.png&quot; width=&quot;70%&quot; /&gt;
&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# PHASES SPACE
# some trajectories
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;orbits&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;X0&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;orbit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;integrate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;odeint&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lotka_volterra&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;X0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;orbits&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;orbit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;c1&quot;&gt;# vector field
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;             &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linspace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;2.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linspace&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;X_grid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Y_grid&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;meshgrid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;                      
&lt;span class=&quot;n&quot;&gt;DX_grid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DY_grid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lotka_volterra&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;X_grid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Y_grid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;                &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sqrt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DX_grid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DY_grid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;**&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;          &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;DX_grid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DY_grid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DX_grid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DY_grid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;N&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p align=&quot;center&quot;&gt;
   &lt;img src=&quot;/assets/images/lotka_volterra_graph1.png&quot; width=&quot;70%&quot; /&gt;
&lt;/p&gt;

&lt;p class=&quot;notice--danger&quot;&gt;&lt;strong&gt;Attention:&lt;/strong&gt; Les unités des simulations ne reflète pas la réalité, il faut des populations suffisamment grandes pour que la modélisation soit correcte.&lt;/p&gt;

&lt;p&gt;Dans le modèle utilisé, les prédateurs prospèrent lorsque les proies sont nombreuses, mais finissent par épuiser leurs ressources et déclinent. Lorsque la population de prédateurs a suffisamment diminué, les proies profitant du répit se reproduisent et leur population augmente de nouveau. Cette dynamique se poursuit en un cycle de croissance et déclin. Il existe 2 équilibres : le point $(0,0)$ est un point de selle instable qui montre que l’extinction des 2 espèce est difficile à obtenir et le point $(\frac{\gamma}{\delta}, \frac{\alpha}{\beta})$ est un centre stable, les populations oscillent autour cet état.&lt;/p&gt;

&lt;p class=&quot;notice--info&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt; Cette modélisation reste assez simple, un grande nombre de variante existe. On peut rajouter des termes de disparition des 2 espèces (dus à la pêche, chasse …), tenir compte de la capacité d’accueil du milieu en ajoutant un terme logistique.&lt;/p&gt;

&lt;h3 id=&quot;compétition&quot;&gt;&lt;em&gt;Compétition&lt;/em&gt;&lt;/h3&gt;

\[\left\{
  \begin{array}{ccc}
    x_1'(t) = r_1x_1(t)\left(1- \frac{x_1(t)+\alpha_{12}x_2(t)}{K_1}\right) \\
    x_2'(t) = r_2x_2(t)\left(1- \frac{x_2(t)+\alpha_{21}x_1(t)}{K_2}\right)
  \end{array}
\right.\]

&lt;h2 id=&quot;méthode-numérique-pour-les-edo&quot;&gt;Méthode numérique pour les EDO&lt;/h2&gt;

&lt;p&gt;methode numerique d’approximation de solutions d’equations différentielles, elle calcule itérativement des estimations de plus en plus précise&lt;/p&gt;

&lt;p&gt;animation courbe qui approche petit à petit une solution theorique&lt;/p&gt;</content><author><name>Julien Guégan</name></author><category term="blog" /><category term="équations différentielles ordinaires" /><category term="écologie" /><category term="modélisation" /><category term="mathématiques appliquées" /><category term="équation logistique" /><summary type="html">Parmis les enjeux du 21ème siècle, l’écologie a un rôle majeure puisqu’elle est la science qui étudie les interactions des êtres vivants entre eux et avec leur milieu. Pour modéliser ces interactions, la dynamique des populations est la branche qui s’intéresse aux fluctuations démographiques des espèces. Ses applications sont nombreuses puisqu’elle peut permettre de répondre à des problèmes variés comme la gestion d’espèces menacées, la protection des cultures contre des nuisibles, le contrôle de bioréacteurs ou la prédiction des épidémies. Modèle de Verhulst A la fin du 18ème siècle, le modèle de Malthus décrit la variation d’une taille de population $y$ au cours du temps $t$ par l’équation différentielle : \[y'(t) = (n-m) y(t) = r y(t)\] avec les constantes : $n$ le taux de natalité, $m$ le taux de mortalité et $r$ le taux de croissance. Ce modèle nous dit que, selon le taux de croissance $r$, la taille des populations peut soit diminuer, rester constante ou augmenter de manière exponentielle. Ce modèle ne reflète pas la réalité puisque une population n’augmentera jamais à l’infini. En 1840, Verlhust propose un modèle de croissance plus adapté en partant de l’hypothèse que le taux de croissance $r$ n’est pas une constante mais est fonction affine de la taille de population $y$ : \[y'(t) = \big(n(y) - m(y)\big) y(t)\] Verlhust part notamment de l’hypothèse que plus la taille d’une population augmente alors plus son taux de natalité $n$ diminue et plus son taux de mortalité $m$ augmente. En partant de cette hypothèse et en appliquant quelques manipulations algébriques astucieuses, on peut montrer que l’équation différentielle précédente peut se réécrire sous la forme : \[y'(t) = r y(t) \left(1 - \frac{y(t)}{K}\right)\] avec $K$ une constante appelée capacité d’accueil. On peut résoudre analytiquement cette équation avec la condition initiale $y(t=0)=y_0$, on obtient la solution logistique : \[y(t) = \frac{K}{1+\left(\frac{K}{y_0}-1\right)e^{-rt}}\] Résolution détaillée de l'équation différentielle logistique par séparation de variable $$ \begin{align*} \int_{y_0}^{y(t)} \frac{1}{y(1-y/K)}dy &amp;amp;= \int_0^t r \ d\tau \\ \int_{y_0}^{y(t)} \frac{K}{y(K-y)}dy &amp;amp;= \int_0^t r \ d\tau \\ \int_{y_0}^{y(t)} \frac{1}{y}dy + \int_{y_0}^{y(t)} \frac{1}{K-1}dy &amp;amp;= \int_0^t r \ d\tau \\ \ln \left| \frac{y(t)}{y_0} \right| - \ln \left| \frac{K-y(t)}{K-y_0} \right| &amp;amp;= r \ t \\ \ln \left( \frac{y(t)\big(K-y_0\big)}{y_0\big(K-y(t)\big)} \right) &amp;amp;= r \ t \\ \frac{y(t)}{K-y(t)} &amp;amp;= \frac{y_0}{K-y_0}e^{rt} \\ y(t)\left(1+\frac{y_0}{K-y_0}e^{rt} \right) &amp;amp;= \frac{K y_0 e^{rt}}{K-y_0} \\ y(t) &amp;amp;= \frac{Ky_0e^{rt}}{K-y_0+y_0e^{rt}} \\ y(t) &amp;amp;= \frac{K y_0}{(K-y_0)e^{-rt}+y_0} \\ \end{align*} \\ \square $$ On remarque que $ \lim\limits_{t\to\infty} y(t) = K $. Ce qui signifie que peut importe la taille de la population initiale $y_0$, la population finira toujours par tendre vers $K$ la capacité d’accueil qu’on qualifie souvent comme le nombre d’individus maximal que le milieu peut accueillir (selon l’espace, les ressources …). Cette fonction dite logistique introduite pour la première fois par Verlhust pour modéliser la croissance des populations trouvera par la suite plein d’application dans des domaines variés comme l’économie, la chimie, les statistiques et plus récemment les réseaux de neurones artificielles. Modèle de Lotka-Volterra Les modèles de Lotka-Volterra sont des sytèmes d’équations simples qui sont apparus au début du 20ème siècle. Ils portent le nom de deux mathématiciens qui ont publié en même temps mais indépendamment sur le sujet : Volterra, en 1926, pour modéliser les populations de sardines et de leurs prédateurs et Lotka, en 1924, dans son livre Elements of Physical Biology. Contrairement au modèle de Verlhust qui s’intéresse à une seule population, les modèles de Lotka-Volterra modélisent les interactions entre plusieurs espèces, chacune ayant un impact sur le développement de l’autres. Proie-prédateur Le modèle proie-prédateur de Lotka-Volterra a permis d’expliquer des données collectées de certaines populations d’animaux comme le lynx et lièvre ainsi que le loup et l’élan aux Etats-Unis. On y représente l’évolution du nombre proies $x$ et de prédateurs $y$ au cours du temps $t$ selon le modèle suivant : \[\left\{ \begin{array}{ccc} x'(t) = x(t)\ \big(\alpha - \beta y(t)\big) \\ y'(t) = y(t)\ \big( \delta x(t) - \gamma\big) \end{array} \right.\] avec les paramètres $\alpha$ et $\delta$ sont les taux de reproduction respectivement des proies et des prédateurs et $\beta$ et $\gamma$ sont les taux de mortalité, respectivement, des proies et des prédateurs. Note: On parle de système autonome : le temps $t$ n’apparaît pas explicitement dans les équations. Si on développe chacune des équations, on peut plus facilement donner une interprétation. Pour les proies, on a d’une part le terme $\alpha x(t)$ qui modélise la croissance exponentielle avec une source illimitée de nourriture et d’autre part $- \beta x(t) y(t)$ qui représente la prédation proportionnelle à la fréquence de rencontre entre prédateurs et proies. L’équation des prédateurs est très semblable à celle des proies, $\delta x(t)y(t)$ est la croissance des prédateurs proportionnelle à la quantité de nourriture disponible (les proies) et $- \gamma y(t)$ représente la mort naturelle des prédateurs. animation pixellique de lapin et renard On peut caculer les équilibres de ce système d’équations différentielles et également en déduire un comportement mais les solutions n’ont pas d’expression analytique simple. Néanmoins, il est possible de calculer une solution approchée numériquement (plus de détails dans la section suivante). # define ODE to resolve r, c, m, b = 3, 4, 1, 2 def lotka_volterra(XY, t=0): dX = r*XY[0] - c*XY[0]*XY[1] dY = b*XY[0]*XY[1] - m*XY[1] return [dX, dY] # discretization T0 = 0 Tmax = 12 n = 200 T = np.linspace(T0, Tmax, n) # TEMPORAL DYNAMIC solution = integrate.odeint(lotka_volterra, X0, T) # use scipy solver # PHASES SPACE # some trajectories orbits = [] for i in range(5): X0 = [0.2+i*0.1, 0.2+i*0.1] orbit = integrate.odeint(lotka_volterra, X0, T) orbits.append(orbit) # vector field x, y = np.linspace(0, 2.5, 20), np.linspace(0, 2, 20) X_grid, Y_grid = np.meshgrid(x, y) DX_grid, DY_grid = lotka_volterra([X_grid, Y_grid]) N = np.sqrt(DX_grid ** 2 + DY_grid ** 2) N[N==0] = 1 DX_grid, DY_grid = DX_grid/N, DY_grid/N Attention: Les unités des simulations ne reflète pas la réalité, il faut des populations suffisamment grandes pour que la modélisation soit correcte. Dans le modèle utilisé, les prédateurs prospèrent lorsque les proies sont nombreuses, mais finissent par épuiser leurs ressources et déclinent. Lorsque la population de prédateurs a suffisamment diminué, les proies profitant du répit se reproduisent et leur population augmente de nouveau. Cette dynamique se poursuit en un cycle de croissance et déclin. Il existe 2 équilibres : le point $(0,0)$ est un point de selle instable qui montre que l’extinction des 2 espèce est difficile à obtenir et le point $(\frac{\gamma}{\delta}, \frac{\alpha}{\beta})$ est un centre stable, les populations oscillent autour cet état. Note: Cette modélisation reste assez simple, un grande nombre de variante existe. On peut rajouter des termes de disparition des 2 espèces (dus à la pêche, chasse …), tenir compte de la capacité d’accueil du milieu en ajoutant un terme logistique. Compétition \[\left\{ \begin{array}{ccc} x_1'(t) = r_1x_1(t)\left(1- \frac{x_1(t)+\alpha_{12}x_2(t)}{K_1}\right) \\ x_2'(t) = r_2x_2(t)\left(1- \frac{x_2(t)+\alpha_{21}x_1(t)}{K_2}\right) \end{array} \right.\] Méthode numérique pour les EDO methode numerique d’approximation de solutions d’equations différentielles, elle calcule itérativement des estimations de plus en plus précise animation courbe qui approche petit à petit une solution theorique</summary></entry><entry><title type="html">Objet Fractal : Dimension, Auto-similarité, Infini</title><link href="http://localhost:4000/posts/2021-08-02-objet_fractal/" rel="alternate" type="text/html" title="Objet Fractal : Dimension, Auto-similarité, Infini" /><published>2021-08-02T21:34:30+02:00</published><updated>2021-08-02T21:34:30+02:00</updated><id>http://localhost:4000/posts/objet_fractal</id><content type="html" xml:base="http://localhost:4000/posts/2021-08-02-objet_fractal/">&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;Elles sont présentes dans les forêts tropicales, à la pointe de la recherche médicale, dans les films et partout où reigne la communication sans film. Ce mystère de la nature a enfin été percé à jour. “Bon sang ! Mais c’est bien sûr !”. Peut-être n’avez vous jamais entendu parler de ces formes étranges, pourtant elles sont partout autour de vous. Leur nom : les fractales.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p class=&quot;small&quot;&gt;&lt;cite&gt; reportage ARTE &lt;/cite&gt; – à la recherche de la dimension cachée&lt;/p&gt;

&lt;!-- Courtesy of embedresponsively.com //--&gt;

&lt;div class=&quot;responsive-video-container&quot;&gt;
    &lt;iframe src=&quot;https://www.youtube-nocookie.com/embed/Tpsu2uz9rCE&quot; frameborder=&quot;0&quot; webkitallowfullscreen=&quot;&quot; mozallowfullscreen=&quot;&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;
  &lt;/div&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p class=&quot;text-justify&quot;&gt;Comme vous l’aurez compris si vous avez regardé l’excellent documentaire d’ARTE ci-dessus, les fractales sont des objets géométriques &lt;em&gt;infiniment morcelés&lt;/em&gt; qui ont la particularité de présenter des structures similaires à toutes les échelles. Ce type de géométrie permet de modéliser avec de simples formules récursives des figures infiniment complexes mais aussi de décrire des phénomènes naturels comme (les motifs des flocons, le chemin pris par la foudre, la forme d’un choux de romanesco, la structure des poumons …) et de trouver des applications dans des domaines technologiques (antennes, transistors, génération graphique de paysages …).&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
   &lt;img src=&quot;/assets/images/fractals_in_nature.png&quot; width=&quot;100%&quot; /&gt;
&lt;/p&gt;

&lt;p class=&quot;notice--primary&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt; Les fractales qu’on trouve dans la nature sont des approximations finies des vrais objets mathématiques.&lt;/p&gt;

&lt;p&gt;Les fractales sont notamment caractérisées par la notion contre intuitive de &lt;strong&gt;dimension non entière&lt;/strong&gt;. En effet, on peut définir une régle générale de mise à l’échelle qui relie la mesure $N$, un facteur d’échelle $\varepsilon$ et la dimension $D$ :&lt;/p&gt;

\[N = \varepsilon^{-D}\]

&lt;p&gt;Par exemple, pour une figure géométrique usuelle comme le carré, sa dimension est $D=2$ et si on le subdivise en $3$ son aire est $N=9$, on a bien $9=\frac{1}{3}^{-2}$. On peut appliquer ce même raisonnement pour un cube ou même une ligne.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;/assets/images/scaling_rule.png&quot; width=&quot;60%&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Maintenant, on cherche à trouver la dimension d’une figure fractale simple. La formule précédente nous donne :&lt;/p&gt;

\[D = -\frac{\log N}{\log \varepsilon}\]

&lt;p class=&quot;text-justify&quot;&gt;Si on s’intéresse à une figure telle que la courbe de Von Koch qui consiste, à partir d’un segment, construire récursivement des triangles équilatéraux sur chaque sous-segment (cf animation ci-dessous). En comptant les segments à chaque nouvelle mise à l’échelle, on comprends que la longueur de la courbe de Koch est multipliée par $4$ pour chaque mise à l’échelle $\varepsilon=\frac{1}{3}$ (on divise les segments par 3). On trouve donc que sa dimension est $D = \frac{\log 4}{\log 3} \approx 1.26$. Il ne s’agit pas d’une simple courbe unidimensionelle, ni d’une surface mais quelque chose “entre les deux”.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;/assets/images/von_koch.gif&quot; width=&quot;60%&quot; /&gt;
&lt;/p&gt;

&lt;p class=&quot;notice--primary&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt; L’approche présentée précédemment est conceptuelle. Une définition rigoureuse et définie pour tout ensemble est la &lt;a href=&quot;https://fr.wikipedia.org/wiki/Dimension_de_Hausdorff&quot;&gt;dimension de Hausdorff&lt;/a&gt;. Elle est peu aisée à mettre en oeuvre…&lt;/p&gt;

&lt;p&gt;On peut différencier 3 catégories principales de fractale :&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;les systèmes de &lt;strong&gt;fonctions itérées&lt;/strong&gt;. Ils ont une règle géométrique fixe comme le flocon de Von Koch, le tapis de Sierpinski, la courbe de Peano.&lt;/li&gt;
  &lt;li&gt;les fractales &lt;strong&gt;aléatoires&lt;/strong&gt;. Elles sont générées par un processus stochastiques comme dans la nature ou les paysages fractales.&lt;/li&gt;
  &lt;li&gt;les ensembles définies par une &lt;strong&gt;relation de récurrence&lt;/strong&gt; en chaque point d’un espace. On peut citer l’ensemble de Julia, de mandelbrot, de lyapunov. On les appelle parfois en anglais des &lt;em&gt;Escape-time fractals&lt;/em&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;ensemble-de-julia&quot;&gt;Ensemble de Julia&lt;/h2&gt;

&lt;p&gt;L’ensemble de Julia associé à un nombre complexe $c$ fixé est l’ensemble des valeurs initiales $z_0$ pour lesquelles la suite suivante est bornée :&lt;/p&gt;

\[\left\{
  \begin{array}{ll}
    z_0 \in \mathbb{C} \\
    z_{n+1} = z_n^2 + c
  \end{array}
\right.\]

&lt;p&gt;Pour générer un ensemble de Julia informatiquement, l’idée est de discrétiser l’espace dans un intervalle fixé pour avoir un nombre fini de valeur $z_0$ pour lesquelle on va tester la convergence de la suite.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# INITIALIZATION
# value of c fixed
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c_reel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c_imag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt; 
&lt;span class=&quot;c1&quot;&gt;# interval limit
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x_min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x_max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;y_min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y_max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# discretization
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5000&lt;/span&gt; 
&lt;span class=&quot;n&quot;&gt;x_step&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x_max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x_min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;y_step&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;y_max&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y_min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;M&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;zeros&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p class=&quot;text-justify&quot;&gt;Pour pouvoir travailler avec des nombres complexes, j’ai choisi de décomposer la partie réelle &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;z_reel&lt;/code&gt; et la partie imaginaire &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;z_image&lt;/code&gt;. Ensuite, on teste la convergence pour un point donné en regardant si on a pas dépassé un nombre fini d’itération &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n_iter &amp;lt; itermax&lt;/code&gt;. On peut également, en plus, vérifier que la suite $(z_n)$ est divergente si son module est strictement supérieur à $2$, &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;z_reel**2 + z_imag**2 &amp;lt; 4&lt;/code&gt; (cf &lt;a href=&quot;https://fr.wikipedia.org/wiki/Ensemble_de_Mandelbrot#Barri%C3%A8re_du_module_%C3%A9gal_%C3%A0_2&quot;&gt;demonstration&lt;/a&gt;). Finalement, on peut remplir une matrice &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M&lt;/code&gt; de $0$ ou de $1$ selon le test de convergence. Mais, pour un rendu visuelle final plus estéthique on peut également remplir la matrice &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;M&lt;/code&gt; selon le taux de convergence estimé avec &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;n_iter/itermax&lt;/code&gt;.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# LOOP ON ALL PIXEL = COMPLEX PLANE
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;n_iter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# convert pixel position to a complex number
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;z_reel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x_step&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x_min&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;z_imag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y_step&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y_min&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# update sequence until convergence
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z_reel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z_imag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;and&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n_iter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;itermax&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;z_reel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z_imag&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z_reel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;z_imag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c_reel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z_imag&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;z_reel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c_imag&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;n_iter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;n_iter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# color image according to convergence rate
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;M&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;255&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;n_iter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;itermax&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p class=&quot;notice--info&quot;&gt;&lt;strong&gt;Astuce:&lt;/strong&gt; En python, on aurait pu directement utiliser la fonction &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;complex()&lt;/code&gt; pour avoir un objet complexe. Dans ce cas, les variables &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;z_reel&lt;/code&gt; et &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;z_imag&lt;/code&gt; seraient inutiles et on pourrait directement récupérer la valeur absolue et mettre au carré une unique variable complexe &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;z&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Finalement, on peut générer des ensembles de Julia pour différentes valeurs de $c$ fixées et pour changer le visuel on peut s’amuser à tester différentes &lt;em&gt;colormap&lt;/em&gt;. Ci-dessous quelques résultats que j’ai généré.&lt;/p&gt;

&lt;figure class=&quot;third &quot;&gt;
  
    
      &lt;img src=&quot;/assets/images/fractal_1.png&quot; alt=&quot;&quot; /&gt;
    
  
    
      &lt;img src=&quot;/assets/images/fractal_2.png&quot; alt=&quot;&quot; /&gt;
    
  
    
      &lt;img src=&quot;/assets/images/fractal_3.png&quot; alt=&quot;&quot; /&gt;
    
  
  
&lt;/figure&gt;

&lt;p&gt;On remarque que les figures obtenues varient grandement en fonction de la valeur du complexe $c$ choisie. En fait, on peut générer les ensembles de julia pour une suite de complexes consécutifs pour voir comment les figures évoluent et en faire une animation.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;/assets/images/fractal_julia.gif&quot; width=&quot;40%&quot; /&gt;
&lt;/p&gt;

&lt;h2 id=&quot;ensemble-de-mandelbrot&quot;&gt;Ensemble de Mandelbrot&lt;/h2&gt;

&lt;p class=&quot;text-justify&quot;&gt;L’ensemble de Mandelbrot est fortement lié aux ensembles de Julia, en effet on peut définir l’ensemble de Mandelbrot $M$ comme l’ensemble des complexes $c$ pour lesquels l’ensemble de Julia $J_c$ correspondant est &lt;strong&gt;connexe&lt;/strong&gt;, c’est-à-dire qu’il est fait d’un seul morceau. On peut dire que l’ensemble de Mandelbrot représente une carte des ensembles de Julia. Et, contrairement au nom qu’il porte, c’est les mathématiciens Julia et Fatou qui l’ont découvert et qui ont montré que la définition précédente est équivalente à l’ensemble des points $c$ du plan complexe $\mathbb{C}$ pour lesquels la suite suivante est bornée :&lt;/p&gt;

\[\left\{
  \begin{array}{ll}
    z_0 = 0 \\
    z_{n+1} = z_n^2 + c
  \end{array}
\right.\]

&lt;p&gt;Cette définition est très similaire à celle de l’ensemble de Julia à la différence qu’on s’intéresse à la variable $c$. Dans le code précédent, il faudrait modifier la ligne &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;z_reel = i * x_step + x_min&lt;/code&gt; par &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;c_reel = i * x_step + x_min&lt;/code&gt; et fixé &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;z_reel = 0&lt;/code&gt; (idem pour la partie imaginaire). On obtient la figure suivante :&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
  &lt;img src=&quot;/assets/images/mandelbrot.png&quot; width=&quot;40%&quot; /&gt;
&lt;/p&gt;

&lt;p class=&quot;notice--primary&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt; Benoît Mandelbrot est le fondateur de la théorie fractale avec notamment son article &lt;em&gt;“How Long Is the Coast of Britain ? Statistical Self-Similarity and Fractional Dimension”&lt;/em&gt; en 1967. C’est également lui qui obtient pour la première fois, une visualisation par ordinateur de cet ensemble.&lt;/p&gt;

&lt;h2 id=&quot;logiciels&quot;&gt;Logiciels&lt;/h2&gt;

&lt;p class=&quot;text-justify&quot;&gt;La génération de fractale n’est pas une tâche facile : beaucoup de paramètres peuvent être à prendre en compte et les temps de calcul sont souvent long. Dans les figures que j’ai généré, on ne voit pas au premiers abords le caractère auto-similaire des fractales, il faudrait changer d’échelle en zoomant de plus en plus profond sur un point du plan.&lt;/p&gt;

&lt;p class=&quot;text-justify&quot;&gt;Il existe de nombreux logiciels générateur de fractal gratuits disponibles. Ils sont souvent optimisés pour faire du multi-processing ou du calcul sur GPU, possèdent une interface graphique pour gérer les nombreux paramètres et sont parfois capables de créer des objets 3D (comme les 3 affichés ci-dessous). Une liste assez complète est disponible &lt;a href=&quot;https://en.wikipedia.org/wiki/Fractal-generating_software#Programs&quot;&gt;ici&lt;/a&gt;.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;/assets/images/mandelbulb3d.png&quot; alt=&quot;image&quot; /&gt;&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;/assets/images/mandelbulber.png&quot; alt=&quot;image&quot; /&gt;&lt;/th&gt;
      &lt;th style=&quot;text-align: center&quot;&gt;&lt;img src=&quot;/assets/images/fragmentarium.png&quot; alt=&quot;image&quot; /&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://www.mandelbulb.com/2014/mandelbulb-3d-mb3d-fractal-rendering-software/&quot;&gt;Mandelbul3D&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://mandelbulber.com/&quot;&gt;Mandelbuler&lt;/a&gt;&lt;/td&gt;
      &lt;td style=&quot;text-align: center&quot;&gt;&lt;a href=&quot;https://syntopia.github.io/Fragmentarium/get.html&quot;&gt;Fragmentarium&lt;/a&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;</content><author><name>Julien Guégan</name></author><category term="blog" /><category term="Fractal" /><category term="Python" /><category term="Julia" /><category term="Mandelbrot" /><category term="Récursivité" /><category term="Infini" /><summary type="html">Elles sont présentes dans les forêts tropicales, à la pointe de la recherche médicale, dans les films et partout où reigne la communication sans film. Ce mystère de la nature a enfin été percé à jour. “Bon sang ! Mais c’est bien sûr !”. Peut-être n’avez vous jamais entendu parler de ces formes étranges, pourtant elles sont partout autour de vous. Leur nom : les fractales. reportage ARTE – à la recherche de la dimension cachée Introduction Comme vous l’aurez compris si vous avez regardé l’excellent documentaire d’ARTE ci-dessus, les fractales sont des objets géométriques infiniment morcelés qui ont la particularité de présenter des structures similaires à toutes les échelles. Ce type de géométrie permet de modéliser avec de simples formules récursives des figures infiniment complexes mais aussi de décrire des phénomènes naturels comme (les motifs des flocons, le chemin pris par la foudre, la forme d’un choux de romanesco, la structure des poumons …) et de trouver des applications dans des domaines technologiques (antennes, transistors, génération graphique de paysages …). Note: Les fractales qu’on trouve dans la nature sont des approximations finies des vrais objets mathématiques. Les fractales sont notamment caractérisées par la notion contre intuitive de dimension non entière. En effet, on peut définir une régle générale de mise à l’échelle qui relie la mesure $N$, un facteur d’échelle $\varepsilon$ et la dimension $D$ : \[N = \varepsilon^{-D}\] Par exemple, pour une figure géométrique usuelle comme le carré, sa dimension est $D=2$ et si on le subdivise en $3$ son aire est $N=9$, on a bien $9=\frac{1}{3}^{-2}$. On peut appliquer ce même raisonnement pour un cube ou même une ligne. Maintenant, on cherche à trouver la dimension d’une figure fractale simple. La formule précédente nous donne : \[D = -\frac{\log N}{\log \varepsilon}\] Si on s’intéresse à une figure telle que la courbe de Von Koch qui consiste, à partir d’un segment, construire récursivement des triangles équilatéraux sur chaque sous-segment (cf animation ci-dessous). En comptant les segments à chaque nouvelle mise à l’échelle, on comprends que la longueur de la courbe de Koch est multipliée par $4$ pour chaque mise à l’échelle $\varepsilon=\frac{1}{3}$ (on divise les segments par 3). On trouve donc que sa dimension est $D = \frac{\log 4}{\log 3} \approx 1.26$. Il ne s’agit pas d’une simple courbe unidimensionelle, ni d’une surface mais quelque chose “entre les deux”. Note: L’approche présentée précédemment est conceptuelle. Une définition rigoureuse et définie pour tout ensemble est la dimension de Hausdorff. Elle est peu aisée à mettre en oeuvre… On peut différencier 3 catégories principales de fractale : les systèmes de fonctions itérées. Ils ont une règle géométrique fixe comme le flocon de Von Koch, le tapis de Sierpinski, la courbe de Peano. les fractales aléatoires. Elles sont générées par un processus stochastiques comme dans la nature ou les paysages fractales. les ensembles définies par une relation de récurrence en chaque point d’un espace. On peut citer l’ensemble de Julia, de mandelbrot, de lyapunov. On les appelle parfois en anglais des Escape-time fractals. Ensemble de Julia L’ensemble de Julia associé à un nombre complexe $c$ fixé est l’ensemble des valeurs initiales $z_0$ pour lesquelles la suite suivante est bornée : \[\left\{ \begin{array}{ll} z_0 \in \mathbb{C} \\ z_{n+1} = z_n^2 + c \end{array} \right.\] Pour générer un ensemble de Julia informatiquement, l’idée est de discrétiser l’espace dans un intervalle fixé pour avoir un nombre fini de valeur $z_0$ pour lesquelle on va tester la convergence de la suite. # INITIALIZATION # value of c fixed c_reel, c_imag = 0.3, 0.5 # interval limit x_min, x_max = -1, 1 y_min, y_max = -1, 1 # discretization size = 5000 x_step = (x_max - x_min)/size y_step = (y_max - y_min)/size M = np.zeros((size,size)) Pour pouvoir travailler avec des nombres complexes, j’ai choisi de décomposer la partie réelle z_reel et la partie imaginaire z_image. Ensuite, on teste la convergence pour un point donné en regardant si on a pas dépassé un nombre fini d’itération n_iter &amp;lt; itermax. On peut également, en plus, vérifier que la suite $(z_n)$ est divergente si son module est strictement supérieur à $2$, z_reel**2 + z_imag**2 &amp;lt; 4 (cf demonstration). Finalement, on peut remplir une matrice M de $0$ ou de $1$ selon le test de convergence. Mais, pour un rendu visuelle final plus estéthique on peut également remplir la matrice M selon le taux de convergence estimé avec n_iter/itermax. # LOOP ON ALL PIXEL = COMPLEX PLANE for i in (range(size)): for j in range(size): n_iter = 0 # convert pixel position to a complex number z_reel = i * x_step + x_min z_imag = j * y_step + y_min # update sequence until convergence while (z_reel**2 + z_imag**2 &amp;lt; 4) and (n_iter &amp;lt; itermax): z_reel, z_imag = z_reel**2 - z_imag**2 + c_reel, 2*z_imag*z_reel + c_imag n_iter = n_iter + 1 # color image according to convergence rate M[j,i] = 255*n_iter/itermax Astuce: En python, on aurait pu directement utiliser la fonction complex() pour avoir un objet complexe. Dans ce cas, les variables z_reel et z_imag seraient inutiles et on pourrait directement récupérer la valeur absolue et mettre au carré une unique variable complexe z. Finalement, on peut générer des ensembles de Julia pour différentes valeurs de $c$ fixées et pour changer le visuel on peut s’amuser à tester différentes colormap. Ci-dessous quelques résultats que j’ai généré. On remarque que les figures obtenues varient grandement en fonction de la valeur du complexe $c$ choisie. En fait, on peut générer les ensembles de julia pour une suite de complexes consécutifs pour voir comment les figures évoluent et en faire une animation. Ensemble de Mandelbrot L’ensemble de Mandelbrot est fortement lié aux ensembles de Julia, en effet on peut définir l’ensemble de Mandelbrot $M$ comme l’ensemble des complexes $c$ pour lesquels l’ensemble de Julia $J_c$ correspondant est connexe, c’est-à-dire qu’il est fait d’un seul morceau. On peut dire que l’ensemble de Mandelbrot représente une carte des ensembles de Julia. Et, contrairement au nom qu’il porte, c’est les mathématiciens Julia et Fatou qui l’ont découvert et qui ont montré que la définition précédente est équivalente à l’ensemble des points $c$ du plan complexe $\mathbb{C}$ pour lesquels la suite suivante est bornée : \[\left\{ \begin{array}{ll} z_0 = 0 \\ z_{n+1} = z_n^2 + c \end{array} \right.\] Cette définition est très similaire à celle de l’ensemble de Julia à la différence qu’on s’intéresse à la variable $c$. Dans le code précédent, il faudrait modifier la ligne z_reel = i * x_step + x_min par c_reel = i * x_step + x_min et fixé z_reel = 0 (idem pour la partie imaginaire). On obtient la figure suivante : Note: Benoît Mandelbrot est le fondateur de la théorie fractale avec notamment son article “How Long Is the Coast of Britain ? Statistical Self-Similarity and Fractional Dimension” en 1967. C’est également lui qui obtient pour la première fois, une visualisation par ordinateur de cet ensemble. Logiciels La génération de fractale n’est pas une tâche facile : beaucoup de paramètres peuvent être à prendre en compte et les temps de calcul sont souvent long. Dans les figures que j’ai généré, on ne voit pas au premiers abords le caractère auto-similaire des fractales, il faudrait changer d’échelle en zoomant de plus en plus profond sur un point du plan. Il existe de nombreux logiciels générateur de fractal gratuits disponibles. Ils sont souvent optimisés pour faire du multi-processing ou du calcul sur GPU, possèdent une interface graphique pour gérer les nombreux paramètres et sont parfois capables de créer des objets 3D (comme les 3 affichés ci-dessous). Une liste assez complète est disponible ici. Mandelbul3D Mandelbuler Fragmentarium</summary></entry><entry><title type="html">Créer un blog Jekyll : Markdown, Github, Latex</title><link href="http://localhost:4000/posts/2021-07-25-creer_un_blog/" rel="alternate" type="text/html" title="Créer un blog Jekyll : Markdown, Github, Latex" /><published>2021-07-25T21:34:30+02:00</published><updated>2021-07-25T21:34:30+02:00</updated><id>http://localhost:4000/posts/creer_un_blog</id><content type="html" xml:base="http://localhost:4000/posts/2021-07-25-creer_un_blog/">&lt;p&gt;J’écris le 1er post de ce blog pour parler tout simplement de comment créer un blog comme celui-ci. La raison principale qui m’a poussé à utiliser Jekyll pour créer un blog est la possibilité d’écrire facilement des équations $\LaTeX$. En effet, j’avais auparavant essayé avec WordPress mais aucune des solutions que j’avais pu testé m’ont véritablement convaincu. En faisant donc quelques recherches sur le sujet, je suis tombé sur &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt; qui semble être utilisé par un bon nombre de blogger scientifique et informatique. Jekyll est un générateur de site statique c’est-à-dire que les pages web créées ne change pas en fonction de l’internaute qui les visite : tous le monde voit le même contenu. A l’inverse d’un site dynamique qui génère son contenu selon des caractéristiques de la demande (heure, adresse IP, compte utilisateur, formulaire …). De plus, Jekyll permet d’éditer du texte en &lt;strong&gt;Markdown&lt;/strong&gt; en se basant sur la librairie &lt;em&gt;Kramdown&lt;/em&gt; qui convertie automatiquement du texte Markdown en HTML. Jekyll est donc une solution tout à fait adaptée pour l’écriture d’un blog web, mais sachez tout de même que ce n’est pas l’unique solution sur le sujet puisque &lt;a href=&quot;https://gohugo.io/&quot;&gt;Hugo&lt;/a&gt; est également un Framework populaire similaire à Jekyll.&lt;/p&gt;

&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;

&lt;p&gt;Pour utiliser Jekyll sous Windows, une façon de faire est de passer par le &lt;a href=&quot;https://docs.microsoft.com/fr-fr/windows/wsl/about&quot;&gt;Sous-système Windows pour Linux&lt;/a&gt; qui permet de profiter d’un environnement Linux. Pour ce faire, vous pouvez simplement télécharger l’application WSL en passant par le Microsoft Store.&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
   &lt;img src=&quot;/assets/images/windows_subsytem_linux.png&quot; width=&quot;60%&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Ensuite, il faut installer &lt;strong&gt;Ruby&lt;/strong&gt; qui est le langage de programmation utilisé par Jekyll pour fonctionner. En ouvrant l’application Ubuntu précédemment téléchargée et en rentrant les commandes suivantes les unes après les autres dans la console, Ruby devrait être présent sur votre ordinateur:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get update &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get upgrade &lt;span class=&quot;nt&quot;&gt;-y&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-add-repository ppa:brightbox/ruby-ng
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get update
&lt;span class=&quot;nb&quot;&gt;sudo &lt;/span&gt;apt-get &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;ruby2.5 ruby2.5-dev build-essential dh-autoreconf
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p class=&quot;notice--primary&quot;&gt;&lt;strong&gt;Note:&lt;/strong&gt; Pour ceux qui ne veulent pas passer par le sous-système Linux, vous pouvez plus simplement télécharger l’installateur de Ruby ici : &lt;a href=&quot;https://rubyinstaller.org/downloads/&quot;&gt;https://rubyinstaller.org/downloads/&lt;/a&gt;. Vous pourrez ensuite lancer les commandes Jekyll qui suivent dans une fenêtre d’invite de commande Windows.&lt;/p&gt;

&lt;p&gt;Finalement, mettez à jour la commande &lt;strong&gt;gem&lt;/strong&gt; et installez &lt;strong&gt;Jekyll&lt;/strong&gt; :&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gem update
gem &lt;span class=&quot;nb&quot;&gt;install &lt;/span&gt;jekyll bundler
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;déploiement&quot;&gt;Déploiement&lt;/h2&gt;

&lt;p&gt;Vous avez désormais tous les pré-requis minimums pour créer un blog avec Jekyll. Commencez par créer un répertoire où vos fichiers de blog seront stockés, créez votre blog avec Jekyll puis construisez le site et rendez le disponible sur un serveur local :&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;mkdir &lt;/span&gt;mon_blog
jekyll new mon_blog
&lt;span class=&quot;nb&quot;&gt;cd &lt;/span&gt;mon_blog
bundle &lt;span class=&quot;nb&quot;&gt;exec &lt;/span&gt;jekyll serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Pour naviguer sur votre site en local, rendez-vous sur l’adresse &lt;a href=&quot;http://localhost:4000&quot;&gt;http://localhost:4000&lt;/a&gt;.&lt;/p&gt;

&lt;p class=&quot;notice--info&quot;&gt;&lt;strong&gt;Astuce:&lt;/strong&gt; Utilisez l’option &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;--livereload&lt;/code&gt; pour rafraîchir automatiquement la page à chaque changement que vous faites dans les fichiers sources : &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;bundle exec jekyll serve --livereload&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Vous avez maintenant générer un site statique avec Jekyll : Bravo, vous pouvez être fier de vous ! Mais je suppose que ça ne vous suffit pas, vous voulez également le rendre disponible à tous le monde. L’une des manières de faire est de l’héberger sur &lt;strong&gt;Github&lt;/strong&gt;. En effet, Jekyll a été développé par le fondateur de Github et le déploiement d’un site est possible en utilisant l’outil &lt;a href=&quot;https://pages.github.com/&quot;&gt;Github-Pages&lt;/a&gt;. Il suffit de créer un répertoire git ayant pour nom &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;username_github&amp;gt;.github.io&lt;/code&gt;, générer votre site Jekyll dans ce répertoire et pousser ce répertoire sur Github. Votre blog &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;&amp;lt;username_github&amp;gt;.github.io&lt;/code&gt; sera désormais visible depuis n’importe quel web explorer.&lt;/p&gt;

&lt;p class=&quot;notice--warning&quot;&gt;&lt;strong&gt;Attention:&lt;/strong&gt; Votre répertoire git doit être de visibilité public. Pour plus d’informations sur le déploiement avec Github, visitez ce &lt;a href=&quot;https://docs.github.com/en/pages/setting-up-a-github-pages-site-with-jekyll/creating-a-github-pages-site-with-jekyll&quot;&gt;site&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;utilisation&quot;&gt;Utilisation&lt;/h2&gt;

&lt;p&gt;Maintenant que vous avez généré votre site, Jekyll a normalement dû créer automatiquement des sous-répertoires et des fichiers dans votre répertoire principal. C’est en modifiant ces fichiers que vous pourrez configurer et personnaliser votre site. Ci-dessous, quelques précisions sur la fonction de certains de ces répertoires et fichiers :&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;FICHIER/REPERTOIRE&lt;/th&gt;
      &lt;th&gt;DESCRIPTION&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;_config.yml&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Stocke les données de configuration. Modifier ici le nom du site, les informations de l’auteurs, les plugins, les extensions …&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;_includes&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Les fichiers externes qui permettent d’ajouter des fonctionnalités et être utiliser par les fichiers de Template.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;_layouts&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Les modèles d’affichage qui enveloppent les posts du blog. On peut choisir des mises en page différentes pour chaque post.&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;_posts&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Le contenu de votre blog, c’est-à-dire les posts que vous allez écrire. Leurs noms doivent suivre le format : &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;YEAR-MONTH-DAY-title.MARKUP&lt;/code&gt;&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;strong&gt;_data&lt;/strong&gt;&lt;/td&gt;
      &lt;td&gt;Les données externes automatiquement chargées et qui sont utilisées par votre site doivent être stockées ici.&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Par défaut, Jekyll génère le site avec le thème &lt;a href=&quot;https://github.com/jekyll/minima&quot;&gt;minima&lt;/a&gt; qui permet d’avoir une version simple et épuré mais il existe un grand nombre de &lt;a href=&quot;http://jekyllthemes.org/&quot;&gt;templates&lt;/a&gt; qui vous permet de personnaliser l’apparence de votre site. Pour ma part, j’ai choisi d’utiliser &lt;a href=&quot;https://mmistakes.github.io/minimal-mistakes/&quot;&gt;minimal-mistakes&lt;/a&gt; qui est assez simple tout en offrant un grand nombre de possibilité.&lt;/p&gt;

&lt;p class=&quot;notice--info&quot;&gt;&lt;strong&gt;Exemple:&lt;/strong&gt; Minimal Mistakes met à disposition un &lt;a href=&quot;https://github.com/mmistakes/mm-github-pages-starter/generate&quot;&gt;starter&lt;/a&gt; qui permet de rapidement et automatiquement mettre en place les fichiers sur votre compte Github et avoir un site hébergé par Github Pages.&lt;/p&gt;

&lt;p&gt;Une fonctionnalité qui m’intéressait particulièrement pour mon blog est de pouvoir facilement ajouter des équations. Le langage le plus connu pour écrire des mathématiques est &lt;strong&gt;Latex&lt;/strong&gt; qui est généralement utiliser avec son compilateur pour générer des pdf. Pour le web, la bibliothèque populaire &lt;strong&gt;MathJax&lt;/strong&gt; écrite en Javascript est capable d’afficher des équations Latex sur la plupart des navigateurs web courant. Cependant, j’ai préféré choisir la librairie &lt;strong&gt;Katex&lt;/strong&gt; qui a l’avantage d’être plus rapide à charger que MathJax quand il y a beaucoup d’équation à convertir (voir exemple ci-dessous, Katex à gauche et MathJax à droite).&lt;/p&gt;

&lt;p align=&quot;center&quot;&gt;
   &lt;img src=&quot;/assets/images/katex_vs_latex.gif&quot; width=&quot;100%&quot; /&gt;
&lt;/p&gt;

&lt;p&gt;Pour installer Katex sur votre blog, il faut copier/coller les lignes suivantes dans le fichier &lt;em&gt;head.html&lt;/em&gt;, elle permettent de charger la librairie Katex sur votre site :&lt;/p&gt;

&lt;div class=&quot;language-javascript highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;rel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;stylesheet&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;href&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;https://cdn.jsdelivr.net/npm/katex@0.13.13/dist/katex.min.css&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;integrity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;sha384-RZU/ijkSsFbcmivfdRBQDtwuwVqK7GMOw6IMvKyeWL2K5UAlyp6WonmB8m7Jd0Hn&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;crossorigin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;anonymous&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;defer&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;https://cdn.jsdelivr.net/npm/katex@0.13.13/dist/katex.min.js&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;integrity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;sha384-pK1WpvzWVBQiP0/GjnvRxV4mOb0oxFuyRxJlk6vVw146n3egcN5C925NCP7a7BY8&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;crossorigin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;anonymous&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/script&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;defer&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;https://cdn.jsdelivr.net/npm/katex@0.13.13/dist/contrib/auto-render.min.js&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;integrity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;sha384-vZTG03m+2yp6N6BNi5iM4rW4oIwk5DfcNdFfxkk9ZWpDriOkXX8voJBFrAO7MpVl&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;crossorigin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;anonymous&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;onload&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;renderMathInElement(document.body);&lt;/span&gt;&lt;span class=&quot;dl&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/script&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;&amp;gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Voilà, c’est tout pour moi. Il y a sûrement des détails à ajouter et des explication supplémentaires à donner, vous pouvez trouver plus d’informations dans les sites ci-dessous et vous pouvez également me poser des questions dans la section commentaire.&lt;/p&gt;

&lt;h2 id=&quot;references&quot;&gt;References&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://jekyllrb.com/&quot;&gt;jekyll&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.github.com/en/pages/setting-up-a-github-pages-site-with-jekyll/creating-a-github-pages-site-with-jekyll&quot;&gt;github-pages&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://mmistakes.github.io/minimal-mistakes/&quot;&gt;minimal-mistakes&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://katex.org/docs/autorender.html&quot;&gt;katex&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://kramdown.gettalong.org/index.html&quot;&gt;kramdown&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Julien Guégan</name></author><category term="blog" /><category term="Jekyll" /><category term="Ruby" /><category term="Markdown" /><category term="Kramdown" /><category term="Github" /><category term="Latex" /><category term="Katex" /><category term="Blog" /><summary type="html">J’écris le 1er post de ce blog pour parler tout simplement de comment créer un blog comme celui-ci. La raison principale qui m’a poussé à utiliser Jekyll pour créer un blog est la possibilité d’écrire facilement des équations $\LaTeX$. En effet, j’avais auparavant essayé avec WordPress mais aucune des solutions que j’avais pu testé m’ont véritablement convaincu. En faisant donc quelques recherches sur le sujet, je suis tombé sur Jekyll qui semble être utilisé par un bon nombre de blogger scientifique et informatique. Jekyll est un générateur de site statique c’est-à-dire que les pages web créées ne change pas en fonction de l’internaute qui les visite : tous le monde voit le même contenu. A l’inverse d’un site dynamique qui génère son contenu selon des caractéristiques de la demande (heure, adresse IP, compte utilisateur, formulaire …). De plus, Jekyll permet d’éditer du texte en Markdown en se basant sur la librairie Kramdown qui convertie automatiquement du texte Markdown en HTML. Jekyll est donc une solution tout à fait adaptée pour l’écriture d’un blog web, mais sachez tout de même que ce n’est pas l’unique solution sur le sujet puisque Hugo est également un Framework populaire similaire à Jekyll. Installation Pour utiliser Jekyll sous Windows, une façon de faire est de passer par le Sous-système Windows pour Linux qui permet de profiter d’un environnement Linux. Pour ce faire, vous pouvez simplement télécharger l’application WSL en passant par le Microsoft Store. Ensuite, il faut installer Ruby qui est le langage de programmation utilisé par Jekyll pour fonctionner. En ouvrant l’application Ubuntu précédemment téléchargée et en rentrant les commandes suivantes les unes après les autres dans la console, Ruby devrait être présent sur votre ordinateur: sudo apt-get update -y &amp;amp;&amp;amp; sudo apt-get upgrade -y sudo apt-add-repository ppa:brightbox/ruby-ng sudo apt-get update sudo apt-get install ruby2.5 ruby2.5-dev build-essential dh-autoreconf Note: Pour ceux qui ne veulent pas passer par le sous-système Linux, vous pouvez plus simplement télécharger l’installateur de Ruby ici : https://rubyinstaller.org/downloads/. Vous pourrez ensuite lancer les commandes Jekyll qui suivent dans une fenêtre d’invite de commande Windows. Finalement, mettez à jour la commande gem et installez Jekyll : gem update gem install jekyll bundler Déploiement Vous avez désormais tous les pré-requis minimums pour créer un blog avec Jekyll. Commencez par créer un répertoire où vos fichiers de blog seront stockés, créez votre blog avec Jekyll puis construisez le site et rendez le disponible sur un serveur local : mkdir mon_blog jekyll new mon_blog cd mon_blog bundle exec jekyll serve Pour naviguer sur votre site en local, rendez-vous sur l’adresse http://localhost:4000. Astuce: Utilisez l’option --livereload pour rafraîchir automatiquement la page à chaque changement que vous faites dans les fichiers sources : bundle exec jekyll serve --livereload Vous avez maintenant générer un site statique avec Jekyll : Bravo, vous pouvez être fier de vous ! Mais je suppose que ça ne vous suffit pas, vous voulez également le rendre disponible à tous le monde. L’une des manières de faire est de l’héberger sur Github. En effet, Jekyll a été développé par le fondateur de Github et le déploiement d’un site est possible en utilisant l’outil Github-Pages. Il suffit de créer un répertoire git ayant pour nom &amp;lt;username_github&amp;gt;.github.io, générer votre site Jekyll dans ce répertoire et pousser ce répertoire sur Github. Votre blog &amp;lt;username_github&amp;gt;.github.io sera désormais visible depuis n’importe quel web explorer. Attention: Votre répertoire git doit être de visibilité public. Pour plus d’informations sur le déploiement avec Github, visitez ce site Utilisation Maintenant que vous avez généré votre site, Jekyll a normalement dû créer automatiquement des sous-répertoires et des fichiers dans votre répertoire principal. C’est en modifiant ces fichiers que vous pourrez configurer et personnaliser votre site. Ci-dessous, quelques précisions sur la fonction de certains de ces répertoires et fichiers : FICHIER/REPERTOIRE DESCRIPTION _config.yml Stocke les données de configuration. Modifier ici le nom du site, les informations de l’auteurs, les plugins, les extensions … _includes Les fichiers externes qui permettent d’ajouter des fonctionnalités et être utiliser par les fichiers de Template. _layouts Les modèles d’affichage qui enveloppent les posts du blog. On peut choisir des mises en page différentes pour chaque post. _posts Le contenu de votre blog, c’est-à-dire les posts que vous allez écrire. Leurs noms doivent suivre le format : YEAR-MONTH-DAY-title.MARKUP _data Les données externes automatiquement chargées et qui sont utilisées par votre site doivent être stockées ici. Par défaut, Jekyll génère le site avec le thème minima qui permet d’avoir une version simple et épuré mais il existe un grand nombre de templates qui vous permet de personnaliser l’apparence de votre site. Pour ma part, j’ai choisi d’utiliser minimal-mistakes qui est assez simple tout en offrant un grand nombre de possibilité. Exemple: Minimal Mistakes met à disposition un starter qui permet de rapidement et automatiquement mettre en place les fichiers sur votre compte Github et avoir un site hébergé par Github Pages. Une fonctionnalité qui m’intéressait particulièrement pour mon blog est de pouvoir facilement ajouter des équations. Le langage le plus connu pour écrire des mathématiques est Latex qui est généralement utiliser avec son compilateur pour générer des pdf. Pour le web, la bibliothèque populaire MathJax écrite en Javascript est capable d’afficher des équations Latex sur la plupart des navigateurs web courant. Cependant, j’ai préféré choisir la librairie Katex qui a l’avantage d’être plus rapide à charger que MathJax quand il y a beaucoup d’équation à convertir (voir exemple ci-dessous, Katex à gauche et MathJax à droite). Pour installer Katex sur votre blog, il faut copier/coller les lignes suivantes dans le fichier head.html, elle permettent de charger la librairie Katex sur votre site : &amp;lt;link rel=&quot;stylesheet&quot; href=&quot;https://cdn.jsdelivr.net/npm/katex@0.13.13/dist/katex.min.css&quot; integrity=&quot;sha384-RZU/ijkSsFbcmivfdRBQDtwuwVqK7GMOw6IMvKyeWL2K5UAlyp6WonmB8m7Jd0Hn&quot; crossorigin=&quot;anonymous&quot;&amp;gt; &amp;lt;script defer src=&quot;https://cdn.jsdelivr.net/npm/katex@0.13.13/dist/katex.min.js&quot; integrity=&quot;sha384-pK1WpvzWVBQiP0/GjnvRxV4mOb0oxFuyRxJlk6vVw146n3egcN5C925NCP7a7BY8&quot; crossorigin=&quot;anonymous&quot;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script defer src=&quot;https://cdn.jsdelivr.net/npm/katex@0.13.13/dist/contrib/auto-render.min.js&quot; integrity=&quot;sha384-vZTG03m+2yp6N6BNi5iM4rW4oIwk5DfcNdFfxkk9ZWpDriOkXX8voJBFrAO7MpVl&quot; crossorigin=&quot;anonymous&quot; onload=&quot;renderMathInElement(document.body);&quot;&amp;gt;&amp;lt;/script&amp;gt; Voilà, c’est tout pour moi. Il y a sûrement des détails à ajouter et des explication supplémentaires à donner, vous pouvez trouver plus d’informations dans les sites ci-dessous et vous pouvez également me poser des questions dans la section commentaire. References jekyll github-pages minimal-mistakes katex kramdown</summary></entry></feed>